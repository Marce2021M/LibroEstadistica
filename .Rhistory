geom_hline(yintercept = 0, linetype = "dashed", color = "gray", size = 0.5) +
geom_line(aes(x = x, y = y, color = "STATA, SPSS ó SAS"), data = subset(pdata, x > 0)) +
geom_line(aes(x = x, y = 0, color = "STATA, SPSS ó SAS"), data = subset(pdata, x < 0)) +
geom_line(aes(x = x, y = x, color = "R")) +
geom_point(aes(x = x, y = y), color = "gray", data = data.frame(x = 1, y = 1)) +
geom_point(aes(x = x, y = y), color = "gray", data = data.frame(x = 0, y = 0)) +
theme_classic() +
ylab(toupper("Dificultad para programar")) +
xlab(toupper("Dificultad del modelo")) +
coord_cartesian(ylim = c(-0.5, 4), clip = 'off') +
annotate("text", x = 0.5, y = -0.9, label = "No uses R") +
annotate("text", x = 1.5, y = -0.9, label = "Usa R") +
annotate("text", x = -0.25, y = -0.9, label = "¡R!") +
theme(axis.text = element_blank(),
axis.title.x = element_text(margin = margin(0.5, unit = "cm")),
axis.ticks.y = element_blank(),
plot.background = element_rect(fill = "#fffff8"),
legend.background = element_rect(fill = "#fffff8"),
panel.background = element_rect(fill = "#fffff8"),
axis.ticks.length.x = unit(.5, "cm")) +
scale_x_continuous(breaks = c(0,1)) +
scale_y_continuous(breaks = c(0,1)) +
scale_color_manual("Programa",
values = c("STATA, SPSS ó SAS" = "tomato3",
"R" = "deepskyblue3"))
knitr::include_graphics('images/compiling.png')
knitr::include_graphics('images/CRAN1.png')
knitr::include_graphics('images/rstudio.png')
knitr::include_graphics('images/RStudio1.png')
knitr::include_graphics('images/RStudio2.png')
# Import the image
library(grid)
bg <- png::readPNG("images/RStudio3.png")
ggplot() +
annotation_custom(rasterGrob(bg,
width = unit(1,"npc"),
height = unit(1,"npc")),
-Inf, Inf, -Inf, Inf) +
geom_label(aes(x = 2.5, y = 1.5), radius=0.1, fill = "deepskyblue3", color = "white", alpha = 0.95,
label = "1", size = 10) +
geom_label(aes(x = 2.5, y = 7.5), radius=0.1, fill = "deepskyblue3", color = "white", alpha = 0.95,
label = "1", size = 10) +
geom_label(aes(x = 7.5, y = 1.5), radius=0.1, fill = "deepskyblue3", color = "white", alpha = 0.95,
label = "1", size = 10) +
geom_label(aes(x = 7.5, y = 7.5), radius=0.1, fill = "deepskyblue3", color = "white", alpha = 0.95,
label = "1", size = 10) +
xlim(c(0,10)) + ylim(c(0,10)) + theme_void()
knitr::include_graphics('images/RStudio4.png')
knitr::include_graphics('images/RStudio5.png')
set.seed(371)
Example1 <- data.frame(Alturas = rnorm(100, 1.65, 0.3), Peso = rnorm(100, 80, 1))
write.csv(Example1, paste0(filedir,"Example1.csv"), row.names=FALSE)
library(DescTools)
install.packages("DescTools")
subDir
library(ggplot2)
library(ggimage)
library(grid)
library(emoGG) #devtools::install_github("dill/emoGG")
library(tidyverse)
library(beepr)
library(gridExtra)
library(latex2exp)
library(DescTools)
library(filesstrings)
filedir <- "datasets/"
knitr::include_graphics('images/rlogo.png')
rojos  <- data.frame(x = rnorm(100, 1), y = rnorm(100,1))
verdes <- data.frame(x = rnorm(100, -1), y = rnorm(100,-2))
xmin   <- c(-4,4)
ymin   <- c(-4,4)
scatter <- ggplot(mapping=aes(x = x, y = y)) +
geom_point(data = verdes, color = "deepskyblue3", size = 4) +
geom_point(data = rojos, color = "tomato3", size = 4) +
geom_point(data = data.frame(x = 1, y = 2), color = "black", size = 5) +
geom_point(data = data.frame(x = 1, y = 2), color = "orange", size = 3) +
theme_classic() +
theme(plot.background = element_rect(fill = "#fffff8"),
panel.background = element_rect(fill = "#fffff8")) +
xlim(xmin[1],xmin[2]) + ylim(ymin[1],ymin[2]) +
xlab("Una variable") +
ylab("Otra variable") +
ggtitle("Datos simulados de X y Y")
empty <- ggplot()+geom_point(aes(1,1), colour="white")+
theme(axis.ticks=element_blank(),
axis.text.x=element_blank(), axis.text.y=element_blank(),                plot.background = element_rect(fill = "#fffff8"),
panel.background = element_rect(fill = "#fffff8"),
axis.title.x=element_blank(), axis.title.y=element_blank())
xhist <- seq(xmin[1],xmin[2], length.out = 100)
hist_top <- ggplot(mapping=aes(x=x,y=y)) +
geom_line(color="tomato3", data = data.frame(x = xhist, y = dnorm(xhist,1))) +
geom_line(color="deepskyblue3", data = data.frame(x = xhist, y = dnorm(xhist,-1))) +
theme_classic() + xlim(xmin[1],xmin[2]) +
theme(plot.background = element_rect(fill = "#fffff8"),
panel.background = element_rect(fill = "#fffff8")) +
ylab("Densidad") + xlab("") +
ggtitle("Altura")
yhist      <- seq(ymin[1],ymin[2], length.out = 100)
hist_right <- ggplot(mapping=aes(x=x,y=y)) +
geom_line(color="tomato3", data = data.frame(x = yhist, y = dnorm(yhist,1))) +
geom_line(color="deepskyblue3", data = data.frame(x = yhist, y = dnorm(yhist,-2))) +
ylab("Densidad") + xlab("") +
ggtitle("Peso") +
theme_classic() + theme(plot.background = element_rect(fill = "#fffff8"),
panel.background = element_rect(fill = "#fffff8")) +
xlim(ymin[1],ymin[2]) + coord_flip()
g <- arrangeGrob(
hist_top +  geom_vline(xintercept = 0, linetype="dashed", color = "forestgreen"),
empty,
scatter +  geom_vline(xintercept = 0, linetype="dashed", color = "forestgreen") +
geom_hline(yintercept = -0.5, linetype="dashed", color = "forestgreen") +
annotate("text", x = -3.5, y = 3.5, label = TeX("$\\Omega_1$"), color = "black") +
annotate("text", x = 3.5,  y = 3.5, label = TeX("$\\Omega_2$"), color = "tomato3") +
annotate("text", x = 3.5, y = -3.5, label = TeX("$\\Omega_3$"), color = "black") +
annotate("text", x = -3.5, y = -3.5, label = TeX("$\\Omega_4$"), color = "deepskyblue3"),
hist_right +  geom_vline(xintercept = -0.5, linetype="dashed", color = "forestgreen"), ncol=2, nrow=2, widths=c(5, 2), heights=c(2, 5),
bottom = textGrob("RESULTADOS DE LA SIMULACIÓN", gp=gpar(fontface="bold", col ="black")))
cowplot::ggdraw(g) +
theme(plot.background = element_rect(fill="#fffff8", color = NA))
#Get data
x     <- seq(-0.5,2, length.out=250)
pdata <- data.frame(x = x, y = x^2)
ggplot(pdata) +
geom_vline(xintercept = 1, linetype = "dashed", color = "gray", size = 0.5) +
geom_hline(yintercept = 1, linetype = "dashed", color = "gray", size = 0.5) +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray", size = 0.5) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray", size = 0.5) +
geom_line(aes(x = x, y = y, color = "STATA, SPSS ó SAS"), data = subset(pdata, x > 0)) +
geom_line(aes(x = x, y = 0, color = "STATA, SPSS ó SAS"), data = subset(pdata, x < 0)) +
geom_line(aes(x = x, y = x, color = "R")) +
geom_point(aes(x = x, y = y), color = "gray", data = data.frame(x = 1, y = 1)) +
geom_point(aes(x = x, y = y), color = "gray", data = data.frame(x = 0, y = 0)) +
theme_classic() +
ylab(toupper("Dificultad para programar")) +
xlab(toupper("Dificultad del modelo")) +
coord_cartesian(ylim = c(-0.5, 4), clip = 'off') +
annotate("text", x = 0.5, y = -0.9, label = "No uses R") +
annotate("text", x = 1.5, y = -0.9, label = "Usa R") +
annotate("text", x = -0.25, y = -0.9, label = "¡R!") +
theme(axis.text = element_blank(),
axis.title.x = element_text(margin = margin(0.5, unit = "cm")),
axis.ticks.y = element_blank(),
plot.background = element_rect(fill = "#fffff8"),
legend.background = element_rect(fill = "#fffff8"),
panel.background = element_rect(fill = "#fffff8"),
axis.ticks.length.x = unit(.5, "cm")) +
scale_x_continuous(breaks = c(0,1)) +
scale_y_continuous(breaks = c(0,1)) +
scale_color_manual("Programa",
values = c("STATA, SPSS ó SAS" = "tomato3",
"R" = "deepskyblue3"))
knitr::include_graphics('images/compiling.png')
knitr::include_graphics('images/CRAN1.png')
knitr::include_graphics('images/rstudio.png')
knitr::include_graphics('images/RStudio1.png')
knitr::include_graphics('images/RStudio2.png')
# Import the image
library(grid)
bg <- png::readPNG("images/RStudio3.png")
ggplot() +
annotation_custom(rasterGrob(bg,
width = unit(1,"npc"),
height = unit(1,"npc")),
-Inf, Inf, -Inf, Inf) +
geom_label(aes(x = 2.5, y = 1.5), radius=0.1, fill = "deepskyblue3", color = "white", alpha = 0.95,
label = "1", size = 10) +
geom_label(aes(x = 2.5, y = 7.5), radius=0.1, fill = "deepskyblue3", color = "white", alpha = 0.95,
label = "1", size = 10) +
geom_label(aes(x = 7.5, y = 1.5), radius=0.1, fill = "deepskyblue3", color = "white", alpha = 0.95,
label = "1", size = 10) +
geom_label(aes(x = 7.5, y = 7.5), radius=0.1, fill = "deepskyblue3", color = "white", alpha = 0.95,
label = "1", size = 10) +
xlim(c(0,10)) + ylim(c(0,10)) + theme_void()
knitr::include_graphics('images/RStudio4.png')
knitr::include_graphics('images/RStudio5.png')
set.seed(371)
Example1 <- data.frame(Alturas = rnorm(100, 1.65, 0.3), Peso = rnorm(100, 80, 1))
write.csv(Example1, paste0(filedir,"Example1.csv"), row.names=FALSE)
knitr::include_graphics('images/RStudio6.png')
plot(Example1)
knitr::include_graphics('images/RStudio7.png')
#Esto es código de R
7 - 2
#Esto es código de R
7 - 2
#Esto es una suma en R
12 + 31
knitr::include_graphics('images/ada_lovelace.jpg')
#Esto es una resta en R
3 - 4
#Esto es una multiplicación en R
7*8
#Esto es una división en R
4/2
#Para sacar logaritmo usas el comando log
log(100)
#Puedes especificar la base del logaritmo con base
log(100, base = 10)
#Así se calculan potencias
6^3
#Para exponenciales puedes usar exp
exp(1)
#O bien exponenciales específicas, e^-3
exp(-3)
#Cálculo de pi
pi
r = 5
cat(paste0("Área = ", pi*r^2))
cat(paste0("Perímetro = ", pi*r*2))
#Un conjunto de caracteres es un char
"Hola"
#Código que sí funciona porque ambos son números
2 + 4
knitr::include_graphics('images/algorithm_lovelace.jpg')
#Código que no funciona porque uno es caracter
2 + "4"
#Asignamos x = 10
x <- 10
#Podemos asignar valores con el signo de =
y = 6
#Aquí z = 106
z <- y + x^2
#Podemos realizar una suma
x + y
#O bien podemos realizar una multiplicación
3*y - x
#Podemos preguntarnos si x vale 4
x == 4
x
x != 4
#Nos preguntamos si x > y
x > y
#Nos preguntamos si x >= 10
x >= 10
#Nos preguntamos si y < 6
y < 6
#O bien si y <= 6
y <= 6
#MALAS PRÁCTICAS, NO HAGAS ESTO
#Cuando lo usas como número TRUE vale 1
100 + TRUE
#MALAS PRÁCTICAS, NO HAGAS ESTO
#Cuando lo usas como número FALSE vale 0
6*FALSE
#Aquí x vale 10, como antes
x
#Aquí cambianos el valor de x y valdrá 0.5
x <- 0.5
x
#Veamos si este lado está mal
(0.1 + 0.1 + 0.1)
#O si éste es el que tiene la trampa
0.3
knitr::include_graphics('images/Z3_Deutsches_Museum.jpeg')
#Veamos qué pasa con la suma
options(digits = 22) #Cambiamos dígitos
(0.1 + 0.1 + 0.1)    #Sumamos
4.1 - 0.1 #Debería dar 4
3/10      #Debería ser 0.3
log(10^(12345), base = 10) #Debería dar 12345
#Nota la diferencia entre lo que le decimos a R
#y lo que resulta
x <- 124765731467098372654176
x
options(digits = 6) #Cambiamos dígitos
abs( (0.1 + 0.1 + 0.1) - 0.3 ) < 1.e-6
setwd(escritorio)
library(ggplot2)
library(ggimage)
library(grid)
library(emoGG) #devtools::install_github("dill/emoGG")
library(tidyverse)
library(beepr)
library(gridExtra)
library(latex2exp)
library(DescTools)
library(filesstrings)
filedir <- "datasets/"
subDir  <- "Mi_curso_de_R"
subcarpeta <- "~/Desktop/Mi_curso_de_R"
knitr::include_graphics('images/rlogo.png')
rojos  <- data.frame(x = rnorm(100, 1), y = rnorm(100,1))
verdes <- data.frame(x = rnorm(100, -1), y = rnorm(100,-2))
xmin   <- c(-4,4)
ymin   <- c(-4,4)
scatter <- ggplot(mapping=aes(x = x, y = y)) +
geom_point(data = verdes, color = "deepskyblue3", size = 4) +
geom_point(data = rojos, color = "tomato3", size = 4) +
geom_point(data = data.frame(x = 1, y = 2), color = "black", size = 5) +
geom_point(data = data.frame(x = 1, y = 2), color = "orange", size = 3) +
theme_classic() +
theme(plot.background = element_rect(fill = "#fffff8"),
panel.background = element_rect(fill = "#fffff8")) +
xlim(xmin[1],xmin[2]) + ylim(ymin[1],ymin[2]) +
xlab("Una variable") +
ylab("Otra variable") +
ggtitle("Datos simulados de X y Y")
empty <- ggplot()+geom_point(aes(1,1), colour="white")+
theme(axis.ticks=element_blank(),
axis.text.x=element_blank(), axis.text.y=element_blank(),                plot.background = element_rect(fill = "#fffff8"),
panel.background = element_rect(fill = "#fffff8"),
axis.title.x=element_blank(), axis.title.y=element_blank())
xhist <- seq(xmin[1],xmin[2], length.out = 100)
hist_top <- ggplot(mapping=aes(x=x,y=y)) +
geom_line(color="tomato3", data = data.frame(x = xhist, y = dnorm(xhist,1))) +
geom_line(color="deepskyblue3", data = data.frame(x = xhist, y = dnorm(xhist,-1))) +
theme_classic() + xlim(xmin[1],xmin[2]) +
theme(plot.background = element_rect(fill = "#fffff8"),
panel.background = element_rect(fill = "#fffff8")) +
ylab("Densidad") + xlab("") +
ggtitle("Altura")
yhist      <- seq(ymin[1],ymin[2], length.out = 100)
hist_right <- ggplot(mapping=aes(x=x,y=y)) +
geom_line(color="tomato3", data = data.frame(x = yhist, y = dnorm(yhist,1))) +
geom_line(color="deepskyblue3", data = data.frame(x = yhist, y = dnorm(yhist,-2))) +
ylab("Densidad") + xlab("") +
ggtitle("Peso") +
theme_classic() + theme(plot.background = element_rect(fill = "#fffff8"),
panel.background = element_rect(fill = "#fffff8")) +
xlim(ymin[1],ymin[2]) + coord_flip()
g <- arrangeGrob(
hist_top +  geom_vline(xintercept = 0, linetype="dashed", color = "forestgreen"),
empty,
scatter +  geom_vline(xintercept = 0, linetype="dashed", color = "forestgreen") +
geom_hline(yintercept = -0.5, linetype="dashed", color = "forestgreen") +
annotate("text", x = -3.5, y = 3.5, label = TeX("$\\Omega_1$"), color = "black") +
annotate("text", x = 3.5,  y = 3.5, label = TeX("$\\Omega_2$"), color = "tomato3") +
annotate("text", x = 3.5, y = -3.5, label = TeX("$\\Omega_3$"), color = "black") +
annotate("text", x = -3.5, y = -3.5, label = TeX("$\\Omega_4$"), color = "deepskyblue3"),
hist_right +  geom_vline(xintercept = -0.5, linetype="dashed", color = "forestgreen"), ncol=2, nrow=2, widths=c(5, 2), heights=c(2, 5),
bottom = textGrob("RESULTADOS DE LA SIMULACIÓN", gp=gpar(fontface="bold", col ="black")))
cowplot::ggdraw(g) +
theme(plot.background = element_rect(fill="#fffff8", color = NA))
#Get data
x     <- seq(-0.5,2, length.out=250)
pdata <- data.frame(x = x, y = x^2)
ggplot(pdata) +
geom_vline(xintercept = 1, linetype = "dashed", color = "gray", size = 0.5) +
geom_hline(yintercept = 1, linetype = "dashed", color = "gray", size = 0.5) +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray", size = 0.5) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray", size = 0.5) +
geom_line(aes(x = x, y = y, color = "STATA, SPSS ó SAS"), data = subset(pdata, x > 0)) +
geom_line(aes(x = x, y = 0, color = "STATA, SPSS ó SAS"), data = subset(pdata, x < 0)) +
geom_line(aes(x = x, y = x, color = "R")) +
geom_point(aes(x = x, y = y), color = "gray", data = data.frame(x = 1, y = 1)) +
geom_point(aes(x = x, y = y), color = "gray", data = data.frame(x = 0, y = 0)) +
theme_classic() +
ylab(toupper("Dificultad para programar")) +
xlab(toupper("Dificultad del modelo")) +
coord_cartesian(ylim = c(-0.5, 4), clip = 'off') +
annotate("text", x = 0.5, y = -0.9, label = "No uses R") +
annotate("text", x = 1.5, y = -0.9, label = "Usa R") +
annotate("text", x = -0.25, y = -0.9, label = "¡R!") +
theme(axis.text = element_blank(),
axis.title.x = element_text(margin = margin(0.5, unit = "cm")),
axis.ticks.y = element_blank(),
plot.background = element_rect(fill = "#fffff8"),
legend.background = element_rect(fill = "#fffff8"),
panel.background = element_rect(fill = "#fffff8"),
axis.ticks.length.x = unit(.5, "cm")) +
scale_x_continuous(breaks = c(0,1)) +
scale_y_continuous(breaks = c(0,1)) +
scale_color_manual("Programa",
values = c("STATA, SPSS ó SAS" = "tomato3",
"R" = "deepskyblue3"))
knitr::include_graphics('images/compiling.png')
knitr::include_graphics('images/CRAN1.png')
knitr::include_graphics('images/rstudio.png')
knitr::include_graphics('images/RStudio1.png')
knitr::include_graphics('images/RStudio2.png')
# Import the image
library(grid)
bg <- png::readPNG("images/RStudio3.png")
ggplot() +
annotation_custom(rasterGrob(bg,
width = unit(1,"npc"),
height = unit(1,"npc")),
-Inf, Inf, -Inf, Inf) +
geom_label(aes(x = 2.5, y = 1.5), radius=0.1, fill = "deepskyblue3", color = "white", alpha = 0.95,
label = "1", size = 10) +
geom_label(aes(x = 2.5, y = 7.5), radius=0.1, fill = "deepskyblue3", color = "white", alpha = 0.95,
label = "1", size = 10) +
geom_label(aes(x = 7.5, y = 1.5), radius=0.1, fill = "deepskyblue3", color = "white", alpha = 0.95,
label = "1", size = 10) +
geom_label(aes(x = 7.5, y = 7.5), radius=0.1, fill = "deepskyblue3", color = "white", alpha = 0.95,
label = "1", size = 10) +
xlim(c(0,10)) + ylim(c(0,10)) + theme_void()
knitr::include_graphics('images/RStudio4.png')
knitr::include_graphics('images/RStudio5.png')
set.seed(371)
Example1 <- data.frame(Alturas = rnorm(100, 1.65, 0.3), Peso = rnorm(100, 80, 1))
write.csv(Example1, paste0(filedir,"Example1.csv"), row.names=FALSE)
knitr::include_graphics('images/RStudio6.png')
plot(Example1)
knitr::include_graphics('images/RStudio7.png')
#Esto es código de R
7 - 2
#Esto es código de R
7 - 2
#Esto es una suma en R
12 + 31
knitr::include_graphics('images/ada_lovelace.jpg')
#Esto es una resta en R
3 - 4
#Esto es una multiplicación en R
7*8
#Esto es una división en R
4/2
#Para sacar logaritmo usas el comando log
log(100)
#Puedes especificar la base del logaritmo con base
log(100, base = 10)
#Así se calculan potencias
6^3
#Para exponenciales puedes usar exp
exp(1)
#O bien exponenciales específicas, e^-3
exp(-3)
#Cálculo de pi
pi
r = 5
cat(paste0("Área = ", pi*r^2))
cat(paste0("Perímetro = ", pi*r*2))
#Un conjunto de caracteres es un char
"Hola"
#Código que sí funciona porque ambos son números
2 + 4
knitr::include_graphics('images/algorithm_lovelace.jpg')
#Código que no funciona porque uno es caracter
2 + "4"
#Asignamos x = 10
x <- 10
#Podemos asignar valores con el signo de =
y = 6
#Aquí z = 106
z <- y + x^2
#Podemos realizar una suma
x + y
#O bien podemos realizar una multiplicación
3*y - x
#Podemos preguntarnos si x vale 4
x == 4
x
x != 4
#Nos preguntamos si x > y
x > y
#Nos preguntamos si x >= 10
x >= 10
#Nos preguntamos si y < 6
y < 6
#O bien si y <= 6
y <= 6
#MALAS PRÁCTICAS, NO HAGAS ESTO
#Cuando lo usas como número TRUE vale 1
100 + TRUE
#MALAS PRÁCTICAS, NO HAGAS ESTO
#Cuando lo usas como número FALSE vale 0
6*FALSE
#Aquí x vale 10, como antes
x
#Aquí cambianos el valor de x y valdrá 0.5
x <- 0.5
x
#Veamos si este lado está mal
(0.1 + 0.1 + 0.1)
#O si éste es el que tiene la trampa
0.3
knitr::include_graphics('images/Z3_Deutsches_Museum.jpeg')
#Veamos qué pasa con la suma
options(digits = 22) #Cambiamos dígitos
(0.1 + 0.1 + 0.1)    #Sumamos
4.1 - 0.1 #Debería dar 4
3/10      #Debería ser 0.3
log(10^(12345), base = 10) #Debería dar 12345
#Nota la diferencia entre lo que le decimos a R
#y lo que resulta
x <- 124765731467098372654176
x
options(digits = 6) #Cambiamos dígitos
abs( (0.1 + 0.1 + 0.1) - 0.3 ) < 1.e-6
#Crear las variables
x <- 200
y <- 100
#Los archivos de variables de R son rda
save(x,y, file = "MisVariables.rda")
rm(rojos, empty, pdata, scatter, xmin, ymin, hist_right, hist_top,
verdes, bg, g, r, xhist, yhist)
names(.GlobalEnv)[-which(names(.GlobalEnv) %in% c(".Random.seed", "escritorio","subDir","subcarpeta", "filedir"))]
#Leemos las variables
load("MisVariables.rda")
#Borramos todo
rm(list = ls())
#Intentamos leer el archivo de nuevo
load("MisVariables.rda")
setwd("~")
load("MisVariables.rda")
#Aquí sí se puede leer
load("MisVariables.rda")
setwd("~")
load("MisVariables.rda")
setwd("~")
load("MisVariables.rda")
knitr::opts_chunk(fig.align='center')
knitr::opts_chunk$set(fig.align='center')
knitr::opts_chunk$set(echo = TRUE)
library(latex2exp)
library(kableExtra)
knitr::include_graphics("images/extrapolating.png")
knitr::opts_chunk$set(echo = TRUE)
library(latex2exp)
library(kableExtra)
kable(plano) %>% kable_styling(plano, latex_options = "striped")
