incap_pred$Significant <- (ultimo.val > incap_pred$Upper)
if (!exists("significancia_data")){
significancia_data <- incap_pred
} else {
significancia_data <- significancia_data %>% bind_rows(incap_pred)
}
colores <- c("Esperado" = "deepskyblue3", "Observado" = "firebrick")
if (incap_pred$Significant){
colores["Esperado"] <- "orange"
}
incapacidades_todas %>% filter(`Del. Ads.` == entidad_val) %>% drop_na() %>%
ggplot() +
geom_line(aes(x = Semana, y = `Número de registros`)) +
geom_errorbar(aes(x = 39, ymin = Lower, ymax = Upper, color = "Esperado"), data = incap_pred) +
geom_point(aes(x = 39, y = Prediction, color = "Esperado"), data = incap_pred, size = 3) +
geom_point(aes(x = 39, y = Prediction), data = incap_pred, size = 1, color = "white") +
geom_point(aes(x = Semana, y = `Número de registros`, color = "Observado"), size = 3) +
geom_point(aes(x = Semana, y = `Número de registros`), size = 1, color = "white") +
theme_minimal() +
scale_color_manual("ITT", values = colores) +
labs(
x = "Semana Epidemiológica",
y = "Número de registros de ITT",
title = "Incapacidades Temporales en el Trabajo (ITT) atribuibles a Infecciones Respiratorias Agudas Graves (IRAG)",
subtitle = entidad_val,
caption = paste0("Fuente: IMSS. Dirección de Prestaciones Económicas. Análisis realizado el ", as.Date(Sys.time()))
) +
theme(legend.position = "bottom") +
ggsave(paste0("ITT_",entidad_val,".pdf"), width = 10, height = 4)
}
write_csv(significancia_data, "Esperados_semana_39.csv")
if (file.exists("SEM_39_ITT.pdf")){file.remove("SEM_39_ITT.pdf")}
system(paste0("gs -q -dNOPAUSE  -dBATCH -dAutoRotatePages=/None -dSAFER -sDEVICE=pdfwrite -sOutputFile=SEM_39_ITT.pdf *.pdf"))
for (entidad_val in unique(incapacidades_todas$`Del. Ads.`)){
incapacidades          <- incapacidades_todas %>% filter(`Del. Ads.` == entidad_val) %>% drop_na()
ultimo.val             <- incapacidades %>% filter(Semana == max(incapacidades$Semana)) %>%
select(`Número de registros`) %>% as.numeric()
incapacidades          <- incapacidades %>% filter(Semana <  max(incapacidades$Semana))
incapacidades_ts       <- ts(incapacidades$`Número de registros`, start = min(incapacidades$Semana))
model.1                <- tsglm(incapacidades_ts, model = list(past_obs = 8, past_mean = 3),  distr = "poisson", link = "identity")
pred                   <- predict(model.1, n.ahead = 1, level=0.99, method = "bootstrap",
estim="normapprox",
parallel = TRUE) #prediction intervals using parametric bootstrap
incap_pred             <- as.data.frame(cbind(pred$interval, pred$median))
colnames(incap_pred)   <- c("Lower","Upper","Prediction")
incap_pred$Delegación  <- entidad_val
incap_pred$Observed    <- ultimo.val
incap_pred$Significant <- (ultimo.val > incap_pred$Upper)
if (!exists("significancia_data")){
significancia_data <- incap_pred
} else {
significancia_data <- significancia_data %>% bind_rows(incap_pred)
}
colores <- c("Esperado" = "deepskyblue3", "Observado" = "firebrick")
if (incap_pred$Significant){
colores["Esperado"] <- "orange"
}
incapacidades_todas %>% filter(`Del. Ads.` == entidad_val) %>% drop_na() %>%
ggplot() +
geom_line(aes(x = Semana, y = `Número de registros`)) +
geom_errorbar(aes(x = 39, ymin = Lower, ymax = Upper, color = "Esperado"), data = incap_pred) +
geom_point(aes(x = 39, y = Prediction, color = "Esperado"), data = incap_pred, size = 3) +
geom_point(aes(x = 39, y = Prediction), data = incap_pred, size = 1, color = "white") +
geom_point(aes(x = Semana, y = `Número de registros`, color = "Observado"), size = 3) +
geom_point(aes(x = Semana, y = `Número de registros`), size = 1, color = "white") +
theme_minimal() +
scale_color_manual("ITT", values = colores) +
labs(
x = "Semana Epidemiológica",
y = "Número de registros de ITT",
title = "Incapacidades Temporales en el Trabajo (ITT) atribuibles a Infecciones Respiratorias Agudas Graves (IRAG)",
subtitle = entidad_val,
caption = paste0("Fuente: IMSS. Dirección de Prestaciones Económicas. Análisis realizado el ", as.Date(Sys.time()))
) +
theme(legend.position = "bottom") +
ggsave(paste0("ITT_",entidad_val,".pdf"), width = 10, height = 4)
}
for (entidad_val in unique(incapacidades_todas$`Del. Ads.`)){
incapacidades          <- incapacidades_todas %>% filter(`Del. Ads.` == entidad_val) %>% drop_na()
ultimo.val             <- incapacidades %>% filter(Semana == max(incapacidades$Semana)) %>%
select(`Número de registros`) %>% as.numeric()
incapacidades          <- incapacidades %>% filter(Semana <  max(incapacidades$Semana))
incapacidades_ts       <- ts(incapacidades$`Número de registros`, start = min(incapacidades$Semana))
model.1                <- tsglm(incapacidades_ts, model = list(past_obs = 8, past_mean = 4),  distr = "poisson", link = "identity")
pred                   <- predict(model.1, n.ahead = 1, level=0.99, method = "bootstrap",
estim="normapprox",
parallel = TRUE) #prediction intervals using parametric bootstrap
incap_pred             <- as.data.frame(cbind(pred$interval, pred$median))
colnames(incap_pred)   <- c("Lower","Upper","Prediction")
incap_pred$Delegación  <- entidad_val
incap_pred$Observed    <- ultimo.val
incap_pred$Significant <- (ultimo.val > incap_pred$Upper)
if (!exists("significancia_data")){
significancia_data <- incap_pred
} else {
significancia_data <- significancia_data %>% bind_rows(incap_pred)
}
colores <- c("Esperado" = "deepskyblue3", "Observado" = "firebrick")
if (incap_pred$Significant){
colores["Esperado"] <- "orange"
}
incapacidades_todas %>% filter(`Del. Ads.` == entidad_val) %>% drop_na() %>%
ggplot() +
geom_line(aes(x = Semana, y = `Número de registros`)) +
geom_errorbar(aes(x = 39, ymin = Lower, ymax = Upper, color = "Esperado"), data = incap_pred) +
geom_point(aes(x = 39, y = Prediction, color = "Esperado"), data = incap_pred, size = 3) +
geom_point(aes(x = 39, y = Prediction), data = incap_pred, size = 1, color = "white") +
geom_point(aes(x = Semana, y = `Número de registros`, color = "Observado"), size = 3) +
geom_point(aes(x = Semana, y = `Número de registros`), size = 1, color = "white") +
theme_minimal() +
scale_color_manual("ITT", values = colores) +
labs(
x = "Semana Epidemiológica",
y = "Número de registros de ITT",
title = "Incapacidades Temporales en el Trabajo (ITT) atribuibles a Infecciones Respiratorias Agudas Graves (IRAG)",
subtitle = entidad_val,
caption = paste0("Fuente: IMSS. Dirección de Prestaciones Económicas. Análisis realizado el ", as.Date(Sys.time()))
) +
theme(legend.position = "bottom") +
ggsave(paste0("ITT_",entidad_val,".pdf"), width = 10, height = 4)
}
warnings()
entidad_val
rm(list = ls())
library(readxl)
library(tidyverse)
library(tscount)
setwd("~/Dropbox/Coronavirus/SEMAFORO ITT")
n.ahead <- 10
incapacidades_todas <- read_excel("~/Dropbox/Coronavirus/SEMAFORO ITT/Frec_semanal_delegacional_Semana39.xlsx")
incapacidades_todas <- incapacidades_todas %>%
filter(year_ini_sem_parametrizada == 2020) %>%
select(Semana, `Del. Ads.`, `Número de registros`)
incapacidades_nal   <- incapacidades_todas %>% group_by(Semana) %>% summarize(`Número de registros` = sum(`Número de registros`)) %>% drop_na()
incapacidades_nal   <- incapacidades_nal %>% mutate(`Del. Ads.` = "Nacional")
incapacidades_todas <- incapacidades_todas %>% bind_rows(incapacidades_nal)
#Análisis nacional
for (entidad_val in unique(incapacidades_todas$`Del. Ads.`)){
incapacidades          <- incapacidades_todas %>% filter(`Del. Ads.` == entidad_val) %>% drop_na()
ultimo.val             <- incapacidades %>% filter(Semana == max(incapacidades$Semana)) %>%
select(`Número de registros`) %>% as.numeric()
incapacidades          <- incapacidades %>% filter(Semana <  max(incapacidades$Semana))
incapacidades_ts       <- ts(incapacidades$`Número de registros`, start = min(incapacidades$Semana))
model.1                <- tsglm(incapacidades_ts, model = list(past_obs = 2, past_mean = 4),  distr = "poisson", link = "identity")
pred                   <- predict(model.1, n.ahead = 1, level=0.99, method = "bootstrap",
estim="normapprox",
parallel = TRUE) #prediction intervals using parametric bootstrap
incap_pred             <- as.data.frame(cbind(pred$interval, pred$median))
colnames(incap_pred)   <- c("Lower","Upper","Prediction")
incap_pred$Delegación  <- entidad_val
incap_pred$Observed    <- ultimo.val
incap_pred$Significant <- (ultimo.val > incap_pred$Upper)
if (!exists("significancia_data")){
significancia_data <- incap_pred
} else {
significancia_data <- significancia_data %>% bind_rows(incap_pred)
}
colores <- c("Esperado" = "deepskyblue3", "Observado" = "firebrick")
if (incap_pred$Significant){
colores["Esperado"] <- "orange"
}
incapacidades_todas %>% filter(`Del. Ads.` == entidad_val) %>% drop_na() %>%
ggplot() +
geom_line(aes(x = Semana, y = `Número de registros`)) +
geom_errorbar(aes(x = 39, ymin = Lower, ymax = Upper, color = "Esperado"), data = incap_pred) +
geom_point(aes(x = 39, y = Prediction, color = "Esperado"), data = incap_pred, size = 3) +
geom_point(aes(x = 39, y = Prediction), data = incap_pred, size = 1, color = "white") +
geom_point(aes(x = Semana, y = `Número de registros`, color = "Observado"), size = 3) +
geom_point(aes(x = Semana, y = `Número de registros`), size = 1, color = "white") +
theme_minimal() +
scale_color_manual("ITT", values = colores) +
labs(
x = "Semana Epidemiológica",
y = "Número de registros de ITT",
title = "Incapacidades Temporales en el Trabajo (ITT) atribuibles a Infecciones Respiratorias Agudas Graves (IRAG)",
subtitle = entidad_val,
caption = paste0("Fuente: IMSS. Dirección de Prestaciones Económicas. Análisis realizado el ", as.Date(Sys.time()))
) +
theme(legend.position = "bottom") +
ggsave(paste0("ITT_",entidad_val,".pdf"), width = 10, height = 4)
}
write_csv(significancia_data, "Esperados_semana_39.csv")
if (file.exists("SEM_39_ITT.pdf")){file.remove("SEM_39_ITT.pdf")}
system(paste0("gs -q -dNOPAUSE  -dBATCH -dAutoRotatePages=/None -dSAFER -sDEVICE=pdfwrite -sOutputFile=SEM_39_ITT.pdf *.pdf"))
warnings()
rm(list = ls())
library(readxl)
library(tidyverse)
library(tscount)
setwd("~/Dropbox/Coronavirus/SEMAFORO ITT")
n.ahead <- 10
incapacidades_todas <- read_excel("~/Dropbox/Coronavirus/SEMAFORO ITT/Frec_semanal_delegacional_Semana39.xlsx")
incapacidades_todas <- incapacidades_todas %>%
filter(year_ini_sem_parametrizada == 2020) %>%
select(Semana, `Del. Ads.`, `Número de registros`)
incapacidades_nal   <- incapacidades_todas %>% group_by(Semana) %>% summarize(`Número de registros` = sum(`Número de registros`)) %>% drop_na()
incapacidades_nal   <- incapacidades_nal %>% mutate(`Del. Ads.` = "Nacional")
incapacidades_todas <- incapacidades_todas %>% bind_rows(incapacidades_nal)
#Análisis nacional
for (entidad_val in unique(incapacidades_todas$`Del. Ads.`)){
incapacidades          <- incapacidades_todas %>% filter(`Del. Ads.` == entidad_val) %>% drop_na()
ultimo.val             <- incapacidades %>% filter(Semana == max(incapacidades$Semana)) %>%
select(`Número de registros`) %>% as.numeric()
incapacidades          <- incapacidades %>% filter(Semana <  max(incapacidades$Semana))
incapacidades_ts       <- ts(incapacidades$`Número de registros`, start = min(incapacidades$Semana))
model.1                <- tsglm(incapacidades_ts, model = list(past_obs = 2, past_mean = 4),  distr = "poisson", link = "identity")
pred                   <- predict(model.1, n.ahead = 1, level=0.95, method = "bootstrap",
estim="normapprox",
parallel = TRUE) #prediction intervals using parametric bootstrap
incap_pred             <- as.data.frame(cbind(pred$interval, pred$median))
colnames(incap_pred)   <- c("Lower","Upper","Prediction")
incap_pred$Delegación  <- entidad_val
incap_pred$Observed    <- ultimo.val
incap_pred$Significant <- (ultimo.val > incap_pred$Upper)
if (!exists("significancia_data")){
significancia_data <- incap_pred
} else {
significancia_data <- significancia_data %>% bind_rows(incap_pred)
}
colores <- c("Esperado" = "deepskyblue3", "Observado" = "firebrick")
if (incap_pred$Significant){
colores["Esperado"] <- "orange"
}
incapacidades_todas %>% filter(`Del. Ads.` == entidad_val) %>% drop_na() %>%
ggplot() +
geom_line(aes(x = Semana, y = `Número de registros`)) +
geom_errorbar(aes(x = 39, ymin = Lower, ymax = Upper, color = "Esperado"), data = incap_pred) +
geom_point(aes(x = 39, y = Prediction, color = "Esperado"), data = incap_pred, size = 3) +
geom_point(aes(x = 39, y = Prediction), data = incap_pred, size = 1, color = "white") +
geom_point(aes(x = Semana, y = `Número de registros`, color = "Observado"), size = 3) +
geom_point(aes(x = Semana, y = `Número de registros`), size = 1, color = "white") +
theme_minimal() +
scale_color_manual("ITT", values = colores) +
labs(
x = "Semana Epidemiológica",
y = "Número de registros de ITT",
title = "Incapacidades Temporales en el Trabajo (ITT) atribuibles a Infecciones Respiratorias Agudas Graves (IRAG)",
subtitle = entidad_val,
caption = paste0("Fuente: IMSS. Dirección de Prestaciones Económicas. Análisis realizado el ", as.Date(Sys.time()))
) +
theme(legend.position = "bottom") +
ggsave(paste0("ITT_",entidad_val,".pdf"), width = 10, height = 4)
}
write_csv(significancia_data, "Esperados_semana_39.csv")
if (file.exists("SEM_39_ITT.pdf")){file.remove("SEM_39_ITT.pdf")}
system(paste0("gs -q -dNOPAUSE  -dBATCH -dAutoRotatePages=/None -dSAFER -sDEVICE=pdfwrite -sOutputFile=SEM_39_ITT.pdf *.pdf"))
rm(list = ls())
library(readxl)
library(tidyverse)
library(tscount)
setwd("~/Dropbox/Coronavirus/SEMAFORO ITT")
n.ahead <- 10
incapacidades_todas <- read_excel("~/Dropbox/Coronavirus/SEMAFORO ITT/Frec_semanal_delegacional_Semana39.xlsx")
incapacidades_todas <- incapacidades_todas %>%
filter(year_ini_sem_parametrizada == 2020) %>%
select(Semana, `Del. Ads.`, `Número de registros`)
incapacidades_nal   <- incapacidades_todas %>% group_by(Semana) %>% summarize(`Número de registros` = sum(`Número de registros`)) %>% drop_na()
incapacidades_nal   <- incapacidades_nal %>% mutate(`Del. Ads.` = "Nacional")
incapacidades_todas <- incapacidades_todas %>% bind_rows(incapacidades_nal)
#Análisis nacional
for (entidad_val in unique(incapacidades_todas$`Del. Ads.`)){
incapacidades          <- incapacidades_todas %>% filter(`Del. Ads.` == entidad_val) %>% drop_na()
ultimo.val             <- incapacidades %>% filter(Semana == max(incapacidades$Semana)) %>%
select(`Número de registros`) %>% as.numeric()
incapacidades          <- incapacidades %>% filter(Semana <  max(incapacidades$Semana))
incapacidades_ts       <- ts(incapacidades$`Número de registros`, start = min(incapacidades$Semana))
model.1                <- tsglm(incapacidades_ts, model = list(past_obs = 2, past_mean = 4),  distr = "poisson", link = "identity")
pred                   <- predict(model.1, n.ahead = 1, level=0.95, method = "bootstrap",
estim="normapprox",
parallel = TRUE) #prediction intervals using parametric bootstrap
incap_pred             <- as.data.frame(cbind(pred$interval, pred$median))
colnames(incap_pred)   <- c("Lower","Upper","Prediction")
incap_pred$Delegación  <- entidad_val
incap_pred$Observed    <- ultimo.val
incap_pred$Significant <- (ultimo.val > incap_pred$Upper | ultimo.val < incap_pred$Lower )
if (!exists("significancia_data")){
significancia_data <- incap_pred
} else {
significancia_data <- significancia_data %>% bind_rows(incap_pred)
}
colores <- c("Esperado" = "deepskyblue3", "Observado" = "firebrick")
if (incap_pred$Significant){
colores["Esperado"] <- "orange"
}
incapacidades_todas %>% filter(`Del. Ads.` == entidad_val) %>% drop_na() %>%
ggplot() +
geom_line(aes(x = Semana, y = `Número de registros`)) +
geom_errorbar(aes(x = 39, ymin = Lower, ymax = Upper, color = "Esperado"), data = incap_pred) +
geom_point(aes(x = 39, y = Prediction, color = "Esperado"), data = incap_pred, size = 3) +
geom_point(aes(x = 39, y = Prediction), data = incap_pred, size = 1, color = "white") +
geom_point(aes(x = Semana, y = `Número de registros`, color = "Observado"), size = 3) +
geom_point(aes(x = Semana, y = `Número de registros`), size = 1, color = "white") +
theme_minimal() +
scale_color_manual("ITT", values = colores) +
labs(
x = "Semana Epidemiológica",
y = "Número de registros de ITT",
title = "Incapacidades Temporales en el Trabajo (ITT) atribuibles a Infecciones Respiratorias Agudas Graves (IRAG)",
subtitle = entidad_val,
caption = paste0("Fuente: IMSS. Dirección de Prestaciones Económicas. Análisis realizado el ", as.Date(Sys.time()))
) +
theme(legend.position = "bottom") +
ggsave(paste0("ITT_",entidad_val,".pdf"), width = 10, height = 4)
}
write_csv(significancia_data, "Esperados_semana_39.csv")
if (file.exists("SEM_39_ITT.pdf")){file.remove("SEM_39_ITT.pdf")}
system(paste0("gs -q -dNOPAUSE  -dBATCH -dAutoRotatePages=/None -dSAFER -sDEVICE=pdfwrite -sOutputFile=SEM_39_ITT.pdf *.pdf"))
rm(list = ls())
library(readxl)
library(tidyverse)
library(tscount)
setwd("~/Dropbox/Coronavirus/SEMAFORO ITT")
n.ahead <- 10
incapacidades_todas <- read_excel("~/Dropbox/Coronavirus/SEMAFORO ITT/Frec_semanal_delegacional_Semana39.xlsx")
incapacidades_todas <- incapacidades_todas %>%
filter(year_ini_sem_parametrizada == 2020) %>%
select(Semana, `Del. Ads.`, `Número de registros`)
incapacidades_nal   <- incapacidades_todas %>% group_by(Semana) %>% summarize(`Número de registros` = sum(`Número de registros`)) %>% drop_na()
incapacidades_nal   <- incapacidades_nal %>% mutate(`Del. Ads.` = "Nacional")
incapacidades_todas <- incapacidades_todas %>% bind_rows(incapacidades_nal)
#Análisis nacional
for (entidad_val in unique(incapacidades_todas$`Del. Ads.`)){
incapacidades          <- incapacidades_todas %>% filter(`Del. Ads.` == entidad_val) %>% drop_na()
ultimo.val             <- incapacidades %>% filter(Semana == max(incapacidades$Semana)) %>%
select(`Número de registros`) %>% as.numeric()
incapacidades          <- incapacidades %>% filter(Semana <  max(incapacidades$Semana))
incapacidades_ts       <- ts(incapacidades$`Número de registros`, start = min(incapacidades$Semana))
model.1                <- tsglm(incapacidades_ts, model = list(past_obs = 2, past_mean = 4),  distr = "poisson", link = "identity")
pred                   <- predict(model.1, n.ahead = 1, level=0.95, method = "bootstrap",
estim="normapprox",
parallel = TRUE) #prediction intervals using parametric bootstrap
incap_pred             <- as.data.frame(cbind(pred$interval, pred$median))
colnames(incap_pred)   <- c("Lower","Upper","Prediction")
incap_pred$Delegación  <- entidad_val
incap_pred$Observed    <- ultimo.val
incap_pred$Significant_Low <- (ultimo.val < incap_pred$Lower )
incap_pred$Significant_Up  <- (ultimo.val > incap_pred$Upper)
if (!exists("significancia_data")){
significancia_data <- incap_pred
} else {
significancia_data <- significancia_data %>% bind_rows(incap_pred)
}
colores <- c("Esperado" = "deepskyblue3", "Observado" = "firebrick")
if (incap_pred$Significant_Up | incap_pred$Significant_Low){
colores["Esperado"] <- "orange"
}
incapacidades_todas %>% filter(`Del. Ads.` == entidad_val) %>% drop_na() %>%
ggplot() +
geom_line(aes(x = Semana, y = `Número de registros`)) +
geom_errorbar(aes(x = 39, ymin = Lower, ymax = Upper, color = "Esperado"), data = incap_pred) +
geom_point(aes(x = 39, y = Prediction, color = "Esperado"), data = incap_pred, size = 3) +
geom_point(aes(x = 39, y = Prediction), data = incap_pred, size = 1, color = "white") +
geom_point(aes(x = Semana, y = `Número de registros`, color = "Observado"), size = 3) +
geom_point(aes(x = Semana, y = `Número de registros`), size = 1, color = "white") +
theme_minimal() +
scale_color_manual("ITT", values = colores) +
labs(
x = "Semana Epidemiológica",
y = "Número de registros de ITT",
title = "Incapacidades Temporales en el Trabajo (ITT) atribuibles a Infecciones Respiratorias Agudas Graves (IRAG)",
subtitle = entidad_val,
caption = paste0("Fuente: IMSS. Dirección de Prestaciones Económicas. Análisis realizado el ", as.Date(Sys.time()))
) +
theme(legend.position = "bottom") +
ggsave(paste0("ITT_",entidad_val,".pdf"), width = 10, height = 4)
}
write_csv(significancia_data, "Esperados_semana_39.csv")
if (file.exists("SEM_39_ITT.pdf")){file.remove("SEM_39_ITT.pdf")}
system(paste0("gs -q -dNOPAUSE  -dBATCH -dAutoRotatePages=/None -dSAFER -sDEVICE=pdfwrite -sOutputFile=SEM_39_ITT.pdf *.pdf"))
library(readr)
dats <- read_delim("~/Downloads/epi_.txt",
"|", escape_double = FALSE, trim_ws = TRUE)
View(dats)
dats %>% filter(str_detect(APEPATER,"Blanco"))
dats <- dats %>% filter(str_detect(APEPATER,"Blanco"))
library(readr)
dats <- read_delim("~/Downloads/epi_.txt", "|", escape_double = FALSE, trim_ws = TRUE)
dats$APEPATER
dats_apellido <- dats %>% filter(str_detect(APEPATER,"BLANCO"))
View(dats_apellido)
dats_apellido <- dats %>% filter(str_detect(APEMATER,"DOMINGUEZ"))
dats_apellido <- dats %>% filter(str_detect(APEPATER,"BLANCO"))
dats_apellido <- dats_apellido %>% filter(str_detect(APEMATER,"DOMINGUEZ"))
View(dats_apellido)
dats_apellido$DEFVERIFI
dats_apellido$FECDEF
dats_apellido$NOMBRE
dats_apellido <- dats_apellido %>% filter(str_detect(NOMBRE, "ZOILA"))
dats_apellido
dats_apellido$DOMICILIO
dats_apellido$SECTOR
dats_apellido
View(dats_apellido)
dats_apellido$DOMICILIO
dats_loc <- dats %>% filter(str_detect(DOMICILIO,"LARRALDE&113"))
dats_loc
dats_loc <- dats %>% filter(str_detect(DOMICILIO,"LARRALDE*113|113*LARRALDE"))
dats_loc <- dats %>% filter(str_detect(DOMICILIO,"LARRALDE.*113|113.*LARRALDE"))
View(dats_loc)
library(readr)
dats     <- read_delim("~/Downloads/epi_.txt", "|", escape_double = FALSE, trim_ws = TRUE)
dats_loc <- dats %>% filter(str_detect(DOMICILIO,"LARRALDE.*113|113.*LARRALDE"))
View(dats_loc)
install.packages(c("backports", "bit64", "broom", "callr", "car", "covr", "cowplot", "cpp11", "deldir", "DescTools", "devtools", "fields", "filesstrings", "jsonlite", "knitr", "lava", "lmtest", "MASS", "matrixStats", "mnormt", "mosaicCore", "openssl", "openxlsx", "processx", "psych", "quantreg", "RcppArmadillo", "rgeos", "rmarkdown", "RSQLite", "shinyjs", "strex", "stringi", "survival", "tinytex", "tscount", "TTR", "usethis", "vcd", "vctrs", "withr", "xfun", "XML", "xts"))
install.packages(c("backports", "bit64", "broom", "callr", "car", "covr", "cowplot", "cpp11", "deldir", "DescTools", "devtools", "fields", "filesstrings", "jsonlite", "knitr", "lava", "lmtest", "MASS", "matrixStats", "mnormt", "mosaicCore", "openssl", "openxlsx", "processx", "psych", "quantreg", "RcppArmadillo", "rgeos", "rmarkdown", "RSQLite", "shinyjs", "strex", "stringi", "survival", "tinytex", "tscount", "TTR", "usethis", "vcd", "vctrs", "withr", "xfun", "XML", "xts"))
install.packages(c("backports", "bit64", "broom", "callr", "car", "covr", "cowplot", "cpp11", "deldir", "DescTools", "devtools", "fields", "filesstrings", "jsonlite", "knitr", "lava", "lmtest", "MASS", "matrixStats", "mnormt", "mosaicCore", "openssl", "openxlsx", "processx", "psych", "quantreg", "RcppArmadillo", "rgeos", "rmarkdown", "RSQLite", "shinyjs", "strex", "stringi", "survival", "tinytex", "tscount", "TTR", "usethis", "vcd", "vctrs", "withr", "xfun", "XML", "xts"))
base.costos <- read_rds("datasets/Costos_x_entidad.RDS")
base.costos <- read_rds("datasets/Costos_x_entidad.RDS")
dats <- tibble(Bajo = c(3500, 500, 0.13),
Medio = c(2000, 300, 0.45),
Alto = c(2000, 200, 0.50))
library(tidyverse)
library(dplyr)
library(imager)
library(rlist)
library(readr)
library(gridExtra)
library(kableExtra)
dats <- tibble(Bajo = c(3500, 500, 0.13),
Medio = c(2000, 300, 0.45),
Alto = c(2000, 200, 0.50))
dats
rownames(dats) <- c("N_h","n_h","p_h")
dats
kable(dats) %>% kable_styling(latex = "striped")
rownames(dats) <- c("N_h","n_h","p_h")
kable(dats) %>% kable_styling(latex_options = "striped")
rownames(dats) <- c("$N_h$","$n_h$","$p_h$")
kable(dats) %>% kable_styling(latex_options = "striped")
dats <- tibble(Año = c(2000, 2005, 2010, 2015),
PIB = c(0.5, 1.2, 1.5, 2.1))
kable(dats) %>% kable_styling(latex_options = "striped")
dats <- tibble(Consomé = c(1,4), Taco = c(3,2), Postre = c(2,1))
dats <- tibble(Consomé = c(1,4), Taco = c(3,2), Postre = c(2,1))
rownames(dats) <- c("Tacos el Güero","Tacos la Güera")
kable(dats) %>% kable_styling(latex_options = "striped")
kable(dats) %>% kable_styling(latex_options="striped")
dats <- c("FUMA" = c(100, 30), "NO FUMA" = c(40, 50))
rownames(dats) <- c("Con enfisema","Sin enfisema")
dats <- tibble("FUMA" = c(100, 30), "NO FUMA" = c(40, 50))
rownames(dats) <- c("Con enfisema","Sin enfisema")
dats <- tibble("Expuesto (y)" = c("a", "c"), "NO expuesto (y)" = c("b", "d"))
rownames(dats) <- c("Resultado (x)","Sin resultado (x)")
kable(dats) %>% kable_styling(latex_options = "striped")
warnings()
install.packages("bookdown")
tibble(`Ventas en millones` = c("0 a 1","1 a 10", "Más de 10"),
`Cantidad de negocios` = c(1000, 100, 10))
library(tidyverse)
library(kableExtra)
tibble(`Ventas en millones` = c("0 a 1","1 a 10", "Más de 10"),
`Cantidad de negocios` = c(1000, 100, 10)) %>%
kable(booktabs = T) %>% kable_styling()
install.packages("DescTools")
install.packages("mvtnorm")
install.packages("DescTools")
install.packages("mclust")
install.packages("ks")
install.packages("emoGG")
devtools::install_github("dill/emoGG")
rm(list = ls())
r <- 42
m <- 50
funcion_a_resolver <- function(N){
suma <- 0
for (i in 0:(r-1)){
suma <- suma + N/(N - i)
}
return(suma - m)
}
uniroot(funcion_a_resolver, lower = 100,
upper = 200)
uniroot(funcion_a_resolver, lower = 0,
upper = 200)
uniroot(funcion_a_resolver, lower = 1,
upper = 200)
factorial(136)
factorial(136)/(factorial(136 - r)*N^m)
factorial(136)/(factorial(136 - r)*136^m)
factorial(137)/(factorial(137 - r)*137^m)
c("Mes",paste0("Gas", 1:10))
r1 <- c("Mes",paste0("Gas", 1:10))
r2 <- c("Mayo" 5.82 , 5.33 , 5.76 , 5.98 , 6.20 , 5.89 , 5.68 , 5.55 , 5.69 , 5.81)
r1 <- c("Mes",paste0("Gas", 1:10))
r2 <- c("Mayo" 5.82 , 5.33 , 5.76 , 5.98 , 6.20 , 5.89 , 5.68 , 5.55 , 5.69 , 5.81)
r2 <- c("Mayo", 5.82 , 5.33 , 5.76 , 5.98 , 6.20 , 5.89 , 5.68 , 5.55 , 5.69 , 5.81)
r3 <- c("Junio" , 5.89 , 5.34 , 5.92 , 6.05 , 6.20 , 6.00 , 5.79 , 5.63 , 5.78 , 5.84)
matrix(c(r1,r2,r3), nrow = 3, byrow = T)
kable(matrix(c(r1,r2,r3), nrow = 3, byrow = T))
library(kableExtra)
kable(matrix(c(r1,r2,r3), nrow = 3, byrow = T))
warnings()
data(USArrests)
USArrests
data(Loblolly)
Loblolly
knitr::opts_chunk$set(echo = TRUE)
library(latex2exp)
library(kableExtra)
library(tidyverse)
set.seed(276457)
data(Loblolly)
arboles <- Loblolly
data(Loblolly)
unique(arboles)$seed
unique(arboles$Seed)
length(unique(arboles$Seed))
rpois(length(unique(arboles$Seed)), 1000)
kable(data.frame(Semilla = arboles$Seed,
Nh = rpois(length(unique(arboles$Seed)), 1000))) %>% kable_styling()
set.seed(64)
muestra <- rlnorm(71)
